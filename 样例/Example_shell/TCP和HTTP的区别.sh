#TCP协议

1.TCP/IP协议分析--->数据发送时是自上而下，层层加码；数据接收时是自下而上，层层解码。 
http://www.cnblogs.com/Bonker/p/3174913.html
2.TCP/IP、Http的区别
http://www.cnblogs.com/renyuan/archive/2013/01/19/2867720.html
3.(传输层)TCP协议
http://www.cnblogs.com/kzang/articles/2582957.html
4.漫谈TCP
http://www.cnblogs.com/yjf512/p/5909031.html
5.https基础流程
http://www.cnblogs.com/qqmomery/p/6107432.html

#摘要
TPC/IP协议是传输层协议，主要解决数据如何在网络中传输，而HTTP是应用层协议，主要解决如何包装数据。关于TCP/IP和HTTP协议的关系，网络有一段比较容易理解的介绍：
我们在传输数据时，可以只使用（传输层）TCP/IP协议，但是那样的话，如果没有应用层，便无法识别数据内容，如果想要使传输的数据有意义，则必须使用到应用层协议，应用层协议有很多，比如HTTP、FTP、TELNET等，也可以自己定义应用层协议。WEB使用HTTP协议作应用层协议，以封装HTTP 文本信息，然后使用TCP/IP做传输层协议将它发到网络上。

TCP/IP代表传输控制协议/网际协议，指的是一系列协议。“IP”代表网际协议，TCP和UDP使用该协议从一个网络传送数据包到另一个网络。
把IP想像成一种高速公路，它允许其它协议在上面行驶并找到到其它电脑的出口。TCP和UDP是高速公路上的“卡车”，它们携带的货物就是像HTTP，文件传输协议FTP这样的协议等。 
你应该能理解，TCP和UDP是FTP，HTTP和SMTP之类使用的传输层协议。虽然TCP和UDP都是用来传输其他协议的，
它们却有一个显著的不同：TCP提供有保证的数据传输，而UDP不提供。这意味着TCP有一个特殊的机制来确保数据安全的不出错的从一个端点传到另一个端点，而UDP不提供任何这样的保证。
HTTP(超文本传输协议)是利用TCP在两台电脑(通常是Web服务器和客户端)之间传输信息的协议。客户端使用Web浏览器发起HTTP请求给Web服务器，Web服务器发送被请求的信息给客户端。

HTTP协议的几个重要概念{

 1.连接(Connection)：一个传输层的实际环流，它是建立在两个相互通讯的应用程序之间。
 2.消息(Message)：HTTP通讯的基本单位，包括一个结构化的八元组序列并通过连接传输。
 3.请求(Request)：一个从客户端到服务器的请求信息包括应用于资源的方法、资源的标识符和协议的版本号
 4.响应(Response)：一个从服务器返回的信息包括HTTP协议的版本号、请求的状态(例如“成功”或“没找到”)和文档的MIME类型。
 5.资源(Resource)：由URI标识的网络数据对象或服务。
 6.实体(Entity)：数据资源或来自服务资源的回映的一种特殊表示方法，它可能被包围在一个请求或响应信息中。一个实体包括实体头信息和实体的本身内容。
 7.客户机(Client)：一个为发送请求目的而建立连接的应用程序。
 8.用户代理(Useragent)：初始化一个请求的客户机。它们是浏览器、编辑器或其它用户工具。
 9.服务器(Server)：一个接受连接并对请求返回信息的应用程序。
 10.源服务器(Originserver)：是一个给定资源可以在其上驻留或被创建的服务器。
 11.代理(Proxy)：一个中间程序，它可以充当一个服务器，也可以充当一个客户机，为其它客户机建立请求。请求是通过可能的翻译在内部或经过传递到其它的服务器中。一个代理在发送请求信息之前，必须解释并且如果可能重写它。
 代理经常作为通过防火墙的客户机端的门户，代理还可以作为一个帮助应用来通过协议处理没有被用户代理完成的请求。
 12.网关(Gateway)：一个作为其它服务器中间媒介的服务器。与代理不同的是，网关接受请求就好象对被请求的资源来说它就是源服务器；发出请求的客户机并没有意识到它在同网关打交道。
 网关经常作为通过防火墙的服务器端的门户，网关还可以作为一个协议翻译器以便存取那些存储在非HTTP系统中的资源。
 13.通道(Tunnel)：是作为两个连接中继的中介程序。一旦激活，通道便被认为不属于HTTP通讯，尽管通道可能是被一个HTTP请求初始化的。当被中继的连接两端关闭时，通道便消失。当一个门户(Portal)必须存在或中介(Intermediary)不能解释中继的通讯时通道被经常使用。
 14.缓存(Cache)：反应信息的局域存储。
 
0. 在目前主流浏览器、Android、IOS手机中，会内置一些常用机构颁发的根证书（证书颁发机构的公钥）；
0.1 某服务器要申请证书，必须先自行生成一对公私钥；
0.2 服务器将公钥交给第三方证书机构买证书；
0.3 证书机构用自己的私钥对服务端的公钥进行签名（即用证书机构的公钥+此签名， 可以校验服务端的公钥的正确性）；
0.4 颁发证书，实际就是将服务器的公钥返回，并附加上机构用私钥做的签名；
0.5 服务器端部署此证书。
}
 
https通信流程如下：{

1. 客户端请求ssl的服务端；
2. 服务端返回服务器证书，此为明文。明文的含义是，本证书被截获、篡改均可被客户端识别；
3. 客户端验证证书：
     按证书里颁布机构的信息，到本地取出对应机构的证书（机构公钥），对服务器的公钥签名验证。如签名验证正确，说明此服务器公钥是经此机构保证的。
     如果本地没有找到对应的机构证书、或签名认证不正确，则验证证书失败。
4. 经过上述步骤，服务器公钥已被证明可靠。使用服务器公钥加密一个随机串，发给服务端；
5. 发送至今所有包的校验串，密文
6. 服务端做同样的事，生成随机串和检验头
X. 至此，客户端和服务端在加密的情况下，交换了一个随机字符串。后续，使用此字符串对称加密所发送的所有消息，第三方则无法截获。
 
3个问题：
1. 客户端如何证明是与正确的服务端进行通信
通过本地预置的机构证书（对应机构的公钥）验证服务器发送过来的签名
2. 客户端如何确认收到服务端的信息没有经中途某人篡改
建立连接阶段，使用加密的校验头来校验已发出的所有信息；通信过程中，通过建立连接过程中交换的随机串加解密来确认
3. 如何保证即使消息被中间人截获，也不能知道消息的内容
中间人无法取到双方建立连接过程中交换的随机串
}

语言与系统交换数据的部分{
go syscall

http://www.cnblogs.com/keanuyaoo/p/3357816.html
https://github.com/golang/go/wiki/WindowsDLLs
http://www.cnblogs.com/zl1991/p/6543634.html

#go语言的os.exec包介绍
http://www.cnblogs.com/zhangym/p/6257415.html 
http://3ms.huawei.com/hi/blog/1067341_2454203.html?for_statistic_from=interfix_blog_rec_interested
#exec包执行外部命令，它将os.StartProcess进行包装使得它更容易映射到stdin和stdout，并且利用pipe连接i/o．

封装的顺序:
os.StartProcess
syscall.StartProcess
CreateProcess
syscall.Syscall12

文件系统和golang api索引很好用，结合起来可以定位到实现。


python _winapi、ctypes

}


